import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.net.Socket;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStreamReader;

public class GuiClient extends JFrame implements ActionListener {

	public static void main(String args[]) {
		new GuiClient();
	}
    private JTabbedPane pane;
    private JPanel mainp;
    private JPanel settp;
    private JPanel aboutp;
    private JTextField hosttf;
    private JTextField porttf;  
    private JTextField usertf;
    private JTextField pwtf;   
    private JMenuItem quitmi;
    private JMenuItem runmi;
    private JMenuItem mainmi;
    private JMenuItem settmi;
    private JMenuItem aboutmi;
    private JButton startb;
    private JLabel resultlb;
    private String username;
    private String pwd;
    private String result;
	GuiClient() {
        pane = new JTabbedPane();
        mainp = new JPanel();
        settp = new JPanel();
        aboutp = new JPanel();
        
        JLabel l = new JLabel("Username: ");
        mainp.add(l);
        usertf = new JTextField("user");
        mainp.add(usertf);
        l = new JLabel("Passwrod: ");
        mainp.add(l);
        pwtf = new JTextField("pw");
        mainp.add(pwtf);
        l = new JLabel("Start decision making process by clicking this button:");
        mainp.add(l);
        startb = new JButton("Start");
        mainp.add(startb);
        startb.addActionListener(this);
        resultlb = new JLabel("-");
        mainp.add(resultlb);
        
        l = new JLabel("Server: ");
        settp.add(l);
        hosttf = new JTextField("host");
        settp.add(hosttf);
        l = new JLabel("Port: ");
        settp.add(l);
        porttf = new JTextField("port");
        settp.add(porttf);

        JLabel hw2 = new JLabel("DecisionPlatform v1.34.5b, build 628tau, by Gold Rubeberg software soltuions");
        aboutp.add(hw2);

        pane.addTab("Main", mainp);
        pane.addTab("Settings", settp);
        pane.addTab("About", aboutp);
        
        JMenuBar mb = new JMenuBar();
        JMenu fm = new JMenu("File");
        mainmi = new JMenuItem("Main");
        mainmi.addActionListener(this);
        fm.add(mainmi);
        runmi = new JMenuItem("Run");
        runmi.addActionListener(this);
        fm.add(runmi);
        fm.addSeparator();
        quitmi = new JMenuItem("Quit");
        quitmi.addActionListener(this);
        fm.add(quitmi);
        mb.add(fm);
        
        JMenu em = new JMenu("Edit");
        settmi = new JMenuItem("Settings");
        settmi.addActionListener(this);
        em.add(settmi);
        mb.add(em);
        
        JMenu hm = new JMenu("Help");
        aboutmi = new JMenuItem("About...");
        aboutmi.addActionListener(this);
        hm.add(aboutmi);
        mb.add(hm);
        setJMenuBar(mb);
        
		add(pane);
		this.setSize(400, 300);
		//pack();
		setVisible(true);
	}
    public void actionPerformed (ActionEvent ae) {
        if (ae.getSource() == aboutmi) {
            pane.setSelectedIndex(2);
        }
        if (ae.getSource() == settmi) {
            pane.setSelectedIndex(1);
        }
        if (ae.getSource() == mainmi) {
            pane.setSelectedIndex(0);
        }
        if (ae.getSource() == runmi) {
           connectToServer();
           onemessage();
           disconnectSocket();
        }
        if (ae.getSource() == quitmi) {
            System.exit(0);
        }
        if (ae.getSource() == startb) {
            username = usertf.getText();
            pwd = pwtf.getText();
            resultlb.setText("Requesting decision from server!");
            connectToServer();
            onemessage();
            disconnectSocket();
            resultlb.setText(result);
        }
    }
    private Socket s;
    private BufferedReader r;
    private PrintWriter w;
    public void connectToServer() {
        Integer i = new Integer(31337);
        i.parseInt(porttf.getText());
        try {
            s = new Socket(hosttf.getText(), i);
            r = new BufferedReader(new InputStreamReader(s.getInputStream()));
            w = new PrintWriter(s.getOutputStream(), true);
        } catch (Exception e)
        {
        }
    }
    public void disconnectSocket() {
      try {
        s.close();
      } catch (Exception e) 
      {
      }
    }
    public String readdata()
    {
       try {
        //System.out.println("writing!");
        String result = r.readLine();
        //System.out.println("read: '" + result + "'");
        return result;
       } catch (Exception e)
       {
           return "";
       }
    }
    public void send_data(String msg)
    {
       try {
        //System.out.println("sending: " + msg);
        w.println(msg);
        //System.out.println("sent!");
       } catch (Exception e)
       {
       }
    }
    
#define LANG 2
#include "protocol.h"
}
